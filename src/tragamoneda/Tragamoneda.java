package tragamoneda;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Esta clase implementa una aplicaci√≥n de tragamonedas simple utilizando JavaFX.
 * Los usuarios pueden hacer clic en el bot√≥n "Girar" para generar una combinaci√≥n aleatoria de s√≠mbolos.
 * Si la combinaci√≥n es ganadora, se muestra un mensaje de "¬°Ganaste!".
 * Si no lo es, se muestra "Intenta de nuevo".
 */
public class Tragamoneda extends Application {

    // Instancia del modelo de tragamonedas
    private final SlotMachine model = new SlotMachine();
    // Executor para manejar la l√≥gica en un hilo separado
    private final ExecutorService executor = Executors.newSingleThreadExecutor();

    /**
     * Modelo de la tragamonedas, define los s√≠mbolos y las reglas del juego.
     * Genera combinaciones aleatorias de s√≠mbolos y verifica si hay una combinaci√≥n ganadora.
     */
    class SlotMachine {

        private final String[] symbols = {"üçí", "üîî", "üçã", "‚≠ê", "üíé"}; // S√≠mbolos posibles de la tragamonedas
        private final Random random = new Random(); // Generador de n√∫meros aleatorios

        /**
         * Genera una combinaci√≥n aleatoria de tres s√≠mbolos.
         * @return una matriz de tres s√≠mbolos aleatorios.
         */
        public String[] spin() {
            return new String[]{symbols[random.nextInt(symbols.length)],
                symbols[random.nextInt(symbols.length)],
                symbols[random.nextInt(symbols.length)]};
        }

        /**
         * Verifica si la combinaci√≥n generada es ganadora (los tres s√≠mbolos son iguales).
         * @param result la combinaci√≥n de s√≠mbolos a verificar.
         * @return true si la combinaci√≥n es ganadora, false en caso contrario.
         */
        public boolean isWinningCombination(String[] result) {
            return result[0].equals(result[1]) && result[1].equals(result[2]);
        }
    }

    /**
     * M√©todo principal que inicializa la interfaz gr√°fica de usuario.
     * @param primaryStage el escenario principal de la aplicaci√≥n.
     */
    @Override
    public void start(Stage primaryStage) {
        // Crear la etiqueta para mostrar el resultado
        Label resultLabel = new Label("Presiona 'Girar' para jugar");
        resultLabel.setFont(new Font("Arial", 20)); // Establecer la fuente y el tama√±o del texto
        resultLabel.setTextFill(Color.DODGERBLUE); // Establecer el color inicial del texto

        // Crear el bot√≥n "Girar"
        Button spinButton = new Button("Girar");
        // Estilos del bot√≥n (color de fondo, texto, tama√±o y bordes)
        spinButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 16px; -fx-border-radius: 10; -fx-background-radius: 10;");
        spinButton.setMinSize(100, 40); // Tama√±o m√≠nimo del bot√≥n
        spinButton.setMaxSize(150, 60); // Tama√±o m√°ximo del bot√≥n

        // Acci√≥n que ocurre cuando se hace clic en el bot√≥n "Girar"
        spinButton.setOnAction(e -> executor.execute(() -> {
            // Generar una combinaci√≥n aleatoria
            String[] result = model.spin();
            String displayResult = String.join(" | ", result); // Mostrar los s√≠mbolos generados

            // Verificar si la combinaci√≥n es ganadora
            boolean isWin = model.isWinningCombination(result);
            String message = isWin ? "¬°Ganaste!" : "Intenta de nuevo"; // Mensaje dependiendo del resultado

            // Actualizar la interfaz gr√°fica en el hilo de JavaFX
            javafx.application.Platform.runLater(() -> {
                resultLabel.setText(displayResult + "\n" + message); // Actualizar el texto de la etiqueta

                // Cambiar el color del mensaje seg√∫n el resultado
                if (isWin) {
                    resultLabel.setTextFill(Color.GREEN); // Color verde para ganar
                } else {
                    resultLabel.setTextFill(Color.RED); // Color rojo para no ganar
                }

                // Establecer estilos adicionales para la etiqueta de resultado
                resultLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");
            });
        }));

        // Crear el contenedor principal y agregar los elementos (etiqueta y bot√≥n)
        VBox root = new VBox(20, resultLabel, spinButton);
        root.setStyle("-fx-background-color: #F0F8FF; -fx-padding: 30; -fx-alignment: center; -fx-border-color: #ADD8E6; -fx-border-width: 3px;");

        // Crear la escena y asignar el contenedor al escenario
        Scene scene = new Scene(root, 400, 300);
        primaryStage.setScene(scene); // Establecer la escena en el escenario principal
        primaryStage.setTitle("Tragamonedas"); // T√≠tulo de la ventana
        primaryStage.show(); // Mostrar el escenario
    }

    /**
     * M√©todo para detener el executor cuando se cierre la aplicaci√≥n.
     */
    @Override
    public void stop() {
        executor.shutdown(); // Apagar el servicio de ejecuci√≥n
    }

    /**
     * M√©todo principal para iniciar la aplicaci√≥n JavaFX.
     * @param args los argumentos de l√≠nea de comandos (no se usan en este caso).
     */
    public static void main(String[] args) {
        launch(args); // Lanzar la aplicaci√≥n JavaFX
    }
}
